#! /usr/bin/env zsh
# set syntax=zsh

# Clone a git URL and cd into the cloned directory.
#
# `superclone URL floo` will clone the URL into a directory named floo, just
# like `git clone URL floo`.
#
# If there's a URL in the clipboard, `superclone` without arguments will use
# that.
#
# You can even do `superclone git clone URL`, say if you copy-pasted some
# instructions, and it will ignore the `git clone` and act like `superclone
# URL`.
#
# Handles the following `git clone` schemes (search `insteadOf` in gitconfig for
# explanations of the weird ones):
# * git@github.com:thoughtbot/paperclip.git
# * https://github.com/rails/rails.git
# * wgh:thoughtbot/paperclip
# * tb:paperclip
# * gbw:paperclip
# * gabebw/dotfiles (clone GitHub repos by username/reponame)

# We did "superclone git clone URL", remove the "git clone"
if [[ "$1" == "git" && "$2" == "clone" ]]; then
  shift;
  shift;
fi

# No arguments provided, assume we should use the clipboard
if (( $# == 0 )); then
  superclone "$(pbpaste)"
else
  git_url="$1"

  if [[ "$git_url" == tb:* ]]; then
    # Chop off the `tb:` from `tb:REPO_NAME` since `basename` won't change it.
    directory="${git_url#tb:}"
  elif [[ "$git_url" == gbw:* ]]; then
    # Chop off the `gbw:` from `gbw:REPO_NAME` since `basename` won't change it.
    directory="${git_url#gbw:}"
  else
    directory="${$(basename $git_url)%.git}"
  fi

  custom_directory="${2:-$directory}"
  hub clone "$git_url" "$custom_directory" && \
    echo "$custom_directory"
fi
