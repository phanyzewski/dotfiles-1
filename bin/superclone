#! /usr/bin/env zsh
# set syntax=zsh

# Clone a git URL and cd into the directory.
#
# `gcl URL floo` will clone the URL into a directory named floo, just like
# `git clone URL floo`.
#
# If there's a URL in the clipboard, just do `gcl` without arguments and it will
# use that.
#
# You can even do `gcl git clone URL` and it will act like `gcl URL`.
#
# Handles the following `git clone` schemes (search `insteadOf` in gitconfig for
# explanations of the weird ones):
# * git@github.com:thoughtbot/paperclip.git
# * https://github.com/rails/rails.git
# * wgh:thoughtbot/paperclip
# * tb:paperclip
# * gbw:paperclip
# * heroku/heroku (so you can clone GitHub repos by username/reponame)

# Did "gcl git clone URL", remove the "git clone"
if [[ "$1" == "git" && "$2" == "clone" ]]; then
  shift;
  shift;
fi

# No arguments provided, assume we should use the clipboard
if (( $# == 0 )); then
  superclone $(pbpaste)
  return
fi

local git_url="$1"
local custom_directory="$2"

if [[ "$git_url" == tb:* ]]; then
  # Chop off the `tb:` from `tb:REPO_NAME` since `basename` won't change it.
  local directory="${git_url#tb:}"
elif [[ "$git_url" == gbw:* ]]; then
  # Chop off the `gbw:` from `gbw:REPO_NAME` since `basename` won't change it.
  local directory="${git_url#gbw:}"
else
  local directory="${$(basename $git_url)%.git}"
fi

if [[ -z "$custom_directory" ]]; then
  hub clone "$git_url" && echo "$directory"
else
  hub clone "$git_url" "$custom_directory" && \
    echo "$custom_directory"
fi
