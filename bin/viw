#!/usr/bin/env zsh

# viw = "Vim which"
# Finds a script file, shell alias, or shell function and edits it.
# If it's an alias or function, it opens Vim right to the line where it's
# defined.
#
# Usage:
#
#     $ viw myalias
#     $ viw git-merge-to

source ~/.zshrc
_handle_unknown_command() {
  echo "\"$1\" is not recognized as a script, function, or alias" >&2
  echo "(searched in $(_search_paths))"
  return 1
}

_definition_type() {
  arg_type_string=$(type -a "$1")
  if [[ "$arg_type_string" == *"is an alias"* ]]; then
    echo "alias"
  elif [[ "$arg_type_string" == *"is a shell function"* ]]; then
    echo "function"
  elif [[ "$arg_type_string" == *"is an autoload shell function"* ]]; then
    # Can't edit these, but they do show up in `which`, so short-circuit here
    echo "not found"
  elif which "$1" > /dev/null 2>&1; then
    echo "script"
  else
    echo "not found"
  fi
}

_edit_script() {
  vim "$(which "$1")"
}

_definition_field_for_pattern() {
  _grep_for_definition -n "$2" | cut -d ":" -f "$1"
}

_search_paths(){
  echo ~/.zshrc ~/.zshenv ~/.aliases
}

_grep_for_definition(){
  grep -E "$@" $(_search_paths) 2>/dev/null
}

_edit_based_on_pattern(){
  local pattern=$1
  local command_name=$2

  if _grep_for_definition -q "$pattern"; then
    file=$(_definition_field_for_pattern 1 "$pattern")
    line=$(_definition_field_for_pattern 2 "$pattern")
    vim "$file" "+$line"
  else
    _handle_unknown_command "$command_name"
  fi
}

_edit_shell_function() {
  _edit_based_on_pattern "(^function $1[ {()])|(^$1\(\))" "$1"
}

_edit_shell_alias() {
  _edit_based_on_pattern "alias $1=" "$1"
}

if [[ $# == 0 ]]; then
  echo "No argument given" >&2
else
  command_name="$1"
  case "$(_definition_type "$command_name")" in
    "alias") _edit_shell_alias "$command_name";;
    "function") _edit_shell_function "$command_name";;
    "script") _edit_script "$command_name";;
    "not found") _handle_unknown_command "$command_name"
  esac
fi
